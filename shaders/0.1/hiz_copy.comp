#version 460
#extension GL_ARB_separate_shader_objects : enable
#extension GL_EXT_shader_explicit_arithmetic_types : enable
#extension GL_EXT_shader_image_int64 : enable

#include "common.glsl"

layout (local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

layout (r64ui, set = 0, binding = 0) uniform readonly restrict u64image2D u_visbuffer;
layout (r32f, set = 0, binding = 1) uniform writeonly restrict image2D u_hiz;

void main() {
    const vec2 position = vec2(gl_GlobalInvocationID.xy);
    const vec2 hiz_size = vec2(imageSize(u_hiz));
    const uint64_t[] payloads = uint64_t[](
        imageLoad(u_visbuffer, ivec2((position + vec2(0.0, 0.0) + 0.5) / hiz_size * vec2(imageSize(u_visbuffer)))).x,
        imageLoad(u_visbuffer, ivec2((position + vec2(0.0, 1.0) + 0.5) / hiz_size * vec2(imageSize(u_visbuffer)))).x,
        imageLoad(u_visbuffer, ivec2((position + vec2(1.0, 0.0) + 0.5) / hiz_size * vec2(imageSize(u_visbuffer)))).x,
        imageLoad(u_visbuffer, ivec2((position + vec2(1.0, 1.0) + 0.5) / hiz_size * vec2(imageSize(u_visbuffer)))).x);
    const float depth = min(
        uintBitsToFloat(uint(payloads[0] >> 34)),
        min(
            uintBitsToFloat(uint(payloads[1] >> 34)),
            min(
                uintBitsToFloat(uint(payloads[2] >> 34)),
                uintBitsToFloat(uint(payloads[3] >> 34)))));
    imageStore(u_hiz, ivec2(gl_GlobalInvocationID.xy), vec4(depth));
}