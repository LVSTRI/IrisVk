#version 460
#extension GL_EXT_buffer_reference : enable
#extension GL_EXT_scalar_block_layout : enable
//#extension GL_EXT_debug_printf : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_shader_explicit_arithmetic_types : enable
#extension GL_ARB_separate_shader_objects : enable
#extension GL_GOOGLE_include_directive : enable

#include "common.glsl"

layout (local_size_x = 256, local_size_y = 1, local_size_z = 1) in;

layout (set = 0, binding = 0) uniform u_camera_block {
    camera_data_t data;
} u_camera;

layout (scalar, buffer_reference) restrict readonly buffer b_meshlet_buffer {
    meshlet_glsl_t[] data;
};

layout (scalar, buffer_reference) restrict readonly buffer b_meshlet_instance_buffer {
    meshlet_instance_t[] data;
};

layout (scalar, buffer_reference) restrict readonly buffer b_transform_buffer {
    mat4[] data;
};

layout (scalar, buffer_reference) restrict buffer b_global_atomics {
    uint[] data;
};

layout (scalar, buffer_reference) restrict queuefamilycoherent buffer b_sw_meshlet_offset {
    uint count;
    uint[] data;
};

layout (scalar, buffer_reference) restrict queuefamilycoherent buffer b_hw_meshlet_offset {
    uint count;
    uint[] data;
};

layout (scalar, buffer_reference) restrict writeonly buffer b_sw_command_buffer {
    compute_indirect_command_t data;
};

layout (scalar, buffer_reference) restrict writeonly buffer b_hw_command_buffer {
    draw_mesh_tasks_indirect_command_t data;
};

layout (push_constant) uniform pc_data_block {
    restrict b_meshlet_buffer meshlet_ptr;
    restrict b_meshlet_instance_buffer meshlet_instance_ptr;
    restrict b_transform_buffer transform_ptr;
    restrict b_sw_meshlet_offset sw_meshlet_offset_ptr;
    restrict b_hw_meshlet_offset hw_meshlet_offset_ptr;
    restrict b_sw_command_buffer sw_command_ptr;
    restrict b_hw_command_buffer hw_command_ptr;
    restrict b_global_atomics global_atomics_ptr;
    uint meshlet_count;
    uint viewport_width;
    uint viewport_height;
};

void main() {
    const uint meshlet_instance_id = gl_GlobalInvocationID.x;
    if (meshlet_instance_id < meshlet_count) {
        const uint meshlet_id = meshlet_instance_ptr.data[meshlet_instance_id].meshlet_id;
        const uint instance_id = meshlet_instance_ptr.data[meshlet_instance_id].instance_id;
        const mat4 transform = transform_ptr.data[instance_id];
        const aabb_t aabb = meshlet_ptr.data[meshlet_id].aabb;
        const vec3 aabb_min = vec3_from_float(aabb.min);
        const vec3 aabb_max = vec3_from_float(aabb.max);
        const vec3 aabb_size = aabb_max - aabb_min + 1e-5;
        const vec3[] corners = vec3[](
            aabb_min,
            aabb_min + vec3(aabb_size.x, 0.0, 0.0),
            aabb_min + vec3(0.0, aabb_size.y, 0.0),
            aabb_min + vec3(0.0, 0.0, aabb_size.z),
            aabb_min + vec3(aabb_size.xy, 0.0),
            aabb_min + vec3(0.0, aabb_size.yz),
            aabb_min + vec3(aabb_size.x, 0.0, aabb_size.z),
            aabb_min + aabb_size);
        vec2 min_xy = vec2(3.402823466e+38);
        vec2 max_xy = vec2(-3.402823466e+38);
        float min_z = 3.402823466e+38;
        bool clip = false;
        for (uint i = 0; i < 8; ++i) {
            const vec4 corner = u_camera.data.old_pv * transform * vec4(corners[i], 1.0);
            const vec3 ndc = corner.xyz / corner.w;
            min_z = min(min_z, ndc.z);
            if (ndc.x <= -1.0 || ndc.x >= 1.0 || ndc.y <= -1.0 || ndc.y >= 1.0 || min_z <= 0.0) {
                clip = true;
                break;
            }
            min_xy = min(min_xy, ndc.xy);
            max_xy = max(max_xy, ndc.xy);
        }
        ivec2 min_viewport = ivec2((min_xy * vec2(0.5, -0.5) + 0.5) * vec2(viewport_width, viewport_height));
        ivec2 max_viewport = ivec2((max_xy * vec2(0.5, -0.5) + 0.5) * vec2(viewport_width, viewport_height));
        min_viewport = max(min_viewport, ivec2(0));
        max_viewport = min(max_viewport, ivec2(viewport_width, viewport_height) - 1);

        const bool is_sw_candidate =
            !clip &&
            abs(max_viewport.x - min_viewport.x) < 32 &&
            abs(max_viewport.y - min_viewport.y) < 32;

        if (is_sw_candidate) {
            const uint slot = atomicAdd(sw_meshlet_offset_ptr.count, 1, VMM_ARGS(QueueFamily, Buffer, AcquireRelease));
            sw_meshlet_offset_ptr.data[slot] = meshlet_instance_id;
        } else {
            const uint slot = atomicAdd(hw_meshlet_offset_ptr.count, 1, VMM_ARGS(QueueFamily, Buffer, AcquireRelease));
            hw_meshlet_offset_ptr.data[slot] = meshlet_instance_id;
        }

        const uint last_wg = atomicAdd(global_atomics_ptr.data[CLUSTER_CLASSIFY_ATOMIC_SLOT], 1, VMM_ARGS(QueueFamily, Buffer, AcquireRelease));
        if (last_wg == meshlet_count - 1) {
            const uint sw_count = atomicLoad(sw_meshlet_offset_ptr.count, VMM_ARGS(QueueFamily, Buffer, Acquire));
            const uint hw_count = atomicLoad(hw_meshlet_offset_ptr.count, VMM_ARGS(QueueFamily, Buffer, Acquire));
            sw_command_ptr.data.x = (sw_count + 3) / 4;
            sw_command_ptr.data.y = 1;
            sw_command_ptr.data.z = 1;

            hw_command_ptr.data.x = hw_count;
            hw_command_ptr.data.y = 1;
            hw_command_ptr.data.z = 1;
        }
    }
}
